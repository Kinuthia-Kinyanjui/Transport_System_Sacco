/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sacco } from "./Sacco";
import { SaccoCountArgs } from "./SaccoCountArgs";
import { SaccoFindManyArgs } from "./SaccoFindManyArgs";
import { SaccoFindUniqueArgs } from "./SaccoFindUniqueArgs";
import { CreateSaccoArgs } from "./CreateSaccoArgs";
import { UpdateSaccoArgs } from "./UpdateSaccoArgs";
import { DeleteSaccoArgs } from "./DeleteSaccoArgs";
import { VehicleFindManyArgs } from "../../vehicle/base/VehicleFindManyArgs";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { SaccoService } from "../sacco.service";
@graphql.Resolver(() => Sacco)
export class SaccoResolverBase {
  constructor(protected readonly service: SaccoService) {}

  async _saccosMeta(
    @graphql.Args() args: SaccoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sacco])
  async saccos(@graphql.Args() args: SaccoFindManyArgs): Promise<Sacco[]> {
    return this.service.saccos(args);
  }

  @graphql.Query(() => Sacco, { nullable: true })
  async sacco(
    @graphql.Args() args: SaccoFindUniqueArgs
  ): Promise<Sacco | null> {
    const result = await this.service.sacco(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sacco)
  async createSacco(@graphql.Args() args: CreateSaccoArgs): Promise<Sacco> {
    return await this.service.createSacco({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Sacco)
  async updateSacco(
    @graphql.Args() args: UpdateSaccoArgs
  ): Promise<Sacco | null> {
    try {
      return await this.service.updateSacco({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sacco)
  async deleteSacco(
    @graphql.Args() args: DeleteSaccoArgs
  ): Promise<Sacco | null> {
    try {
      return await this.service.deleteSacco(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Vehicle], { name: "vehicles" })
  async findVehicles(
    @graphql.Parent() parent: Sacco,
    @graphql.Args() args: VehicleFindManyArgs
  ): Promise<Vehicle[]> {
    const results = await this.service.findVehicles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sacco as PrismaSacco,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class SaccoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SaccoCountArgs, "select">): Promise<number> {
    return this.prisma.sacco.count(args);
  }

  async saccos(args: Prisma.SaccoFindManyArgs): Promise<PrismaSacco[]> {
    return this.prisma.sacco.findMany(args);
  }
  async sacco(args: Prisma.SaccoFindUniqueArgs): Promise<PrismaSacco | null> {
    return this.prisma.sacco.findUnique(args);
  }
  async createSacco(args: Prisma.SaccoCreateArgs): Promise<PrismaSacco> {
    return this.prisma.sacco.create(args);
  }
  async updateSacco(args: Prisma.SaccoUpdateArgs): Promise<PrismaSacco> {
    return this.prisma.sacco.update(args);
  }
  async deleteSacco(args: Prisma.SaccoDeleteArgs): Promise<PrismaSacco> {
    return this.prisma.sacco.delete(args);
  }

  async findVehicles(
    parentId: string,
    args: Prisma.VehicleFindManyArgs
  ): Promise<PrismaVehicle[]> {
    return this.prisma.sacco
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vehicles(args);
  }
}
